prometheus:
  enabled: true
  prometheusSpec:
  extraScrapeConfigs: |
      - job_name: karpenter
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - karpenter
        relabel_configs:
        - source_labels:
          - __meta_kubernetes_endpoints_name
          - __meta_kubernetes_endpoint_port_name
          action: keep
          regex: karpenter;http-metrics
      retention: 15d

    # nodeSelector:
    #   karpenter.sh/nodepool: "prometheus"

    # Storage
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "efs-prometheus"
          accessModes:
            - ReadWriteMany
          resources:
            requests:
              storage: 50Gi

    podMonitorSelector: {}
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false

kubeStateMetrics:
  enabled: true

alertmanager:
  enabled: true

grafana:
  enabled: true
  adminUser: admin
  adminPassword: 123@Select

  initChownData:
    enabled: false

  persistence:
    enabled: true
    storageClassName: "efs-grafana"
    accessModes:
      - ReadWriteMany
    size: 50Gi

  # nodeSelector:
  #   karpenter.sh/nodepool: "prometheus"    

prometheusOperator:
  enabled: true
  namespaces: ''
  denyNamespaces: ''
  prometheusInstanceNamespaces: ''
  alertmanagerInstanceNamespaces: ''
  thanosRulerInstanceNamespaces: ''

  # nodeSelector:
  #   karpenter.sh/nodepool: "prometheus" 

prometheus-node-exporter:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: "eks.amazonaws.com/compute-type"
                operator: "NotIn"
                values:
                  - "fargate"